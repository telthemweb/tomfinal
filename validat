## msu_buyersdb MIGRATION

--migration
php migrations orm:schema-tool:update --force


[WARNING] Not passing the "--complete" option to "orm:schema-tool:update" is deprecated and will not be supported when 
           using doctrine/dbal 4



function validatePhoneNumber($phoneNumber) {
    $phoneNumber = preg_replace('/\D+/', '', $phoneNumber); // Remove all non-numeric characters
    if (substr($phoneNumber, 0, 1) === '+') { // Check if the number starts with a plus sign
        return ctype_digit(substr($phoneNumber, 1)) && strlen(substr($phoneNumber, 1)) > 6; // Check if the rest of the number is numeric and has at least 7 digits
    }
    return ctype_digit($phoneNumber) && strlen($phoneNumber) > 6; // Check if the number is numeric and has at least 7 digits
}


function validateZimbabwePhoneNumber($phoneNumber) {
    $phoneNumber = preg_replace('/\D+/', '', $phoneNumber); // Remove all non-numeric characters
    if (substr($phoneNumber, 0, 3) === '263') { // Check if the number starts with the country code for Zimbabwe (+263)
        $phoneNumber = substr($phoneNumber, 3); // Remove the country code from the number
        return ctype_digit($phoneNumber) && strlen($phoneNumber) === 9 && in_array(substr($phoneNumber, 0, 1), ['7', '8']); // Check if the rest of the number is numeric and has exactly 9 digits, and if the first digit is either a 7 or an 8 (which are the only valid starting digits for mobile numbers in Zimbabwe)
    }
    return false; // If the number doesn't start with the correct country code, it's not a valid Zimbabwean number
}



function validateCreditCard($creditCardNumber) {
    // Remove all non-numeric characters from the credit card number
    $creditCardNumber = preg_replace('/\D+/', '', $creditCardNumber);
    
    // Check if the credit card number is between 13 and 19 digits long
    if (strlen($creditCardNumber) < 13 || strlen($creditCardNumber) > 19) {
        return false;
    }
    
    // Reverse the credit card number and convert each digit to an integer
    $numberArray = array_map('intval', str_split(strrev($creditCardNumber)));
    
    $sum = 0;
    
    for ($i = 0; $i < count($numberArray); $i++) {
        if ($i % 2 === 1) { // Double every second digit
            $numberArray[$i] *= 2;
        }

        if ($numberArray[$i] > 9) { // If the doubled digit is greater than 9, subtract 9
            $numberArray[$i] -= 9;
        }
        
        $sum += $numberArray[$i]; // Add up all the digits in the number
    }
    
    return $sum % 10 === 0; // If the sum of the digits is divisible by 10, the credit card number is valid
}
This function first removes all non-numeric characters from the credit card number using a regular expression. It then checks if the resulting number is between 13 and 19 digits long, which are the typical lengths of credit card numbers.

The function then reverses the credit card number and converts each digit to an integer. It doubles every second digit starting from the second-to-last digit, and subtracts 9 from any digit that is greater than 9. It then adds up all the resulting digits to get the sum.

Finally, it checks if the sum of the digits is divisible by 10. If it is, the credit card number is valid according to the Luhn algorithm.

Note that this is a basic validation function and does not take into account additional validation rules or security measures that may be required for credit card processing.


function validateStrongPassword($password) {
    // Check if the password is at least 8 characters long
    if (strlen($password) < 8) {
        return false;
    }
    
    // Check if the password contains at least one uppercase letter
    if (!preg_match('/[A-Z]/', $password)) {
        return false;
    }
    
    // Check if the password contains at least one lowercase letter
    if (!preg_match('/[a-z]/', $password)) {
        return false;
    }
    
    // Check if the password contains at least one number
    if (!preg_match('/\d/', $password)) {
        return false;
    }
    
    // Check if the password contains at least one special character
    if (!preg_match('/[^\w\s]/', $password)) {
        return false;
    }
    
    return true; // If all checks pass, the password is strong
}
function validateString($string) {
    return preg_match('/^[a-zA-Z0-9_\-\'\s]+$/', $string) === 1;
}

//0a1e22e6142dfba5a732359d9a764784 my ke


function validateMastercard($cardNumber) {
    // Remove any non-numeric characters from the input string
    $cardNumber = preg_replace('/\D/', '', $cardNumber);
    
    // Check if the input string matches the regex pattern for Mastercard numbers
    if (!preg_match('/^5[1-5][0-9]{14}$/', $cardNumber)) {
        return false;
    }
    
    // Implement the Luhn algorithm to verify the card number
    $sum = 0;
    $numDigits = strlen($cardNumber);
    $parity = $numDigits % 2;
    for ($i = 0; $i < $numDigits; $i++) {
        $digit = intval($cardNumber[$i]);
        if ($i % 2 == $parity) {
            $digit *= 2;
            if ($digit > 9) {
                $digit -= 9;
            }
        }
        $sum += $digit;
    }
    return $sum % 10 == 0;
}

function validateVisa($cardNumber) {
    // Remove any non-numeric characters from the input string
    $cardNumber = preg_replace('/\D/', '', $cardNumber);
    
    // Check if the input string matches the regex pattern for Visa numbers
    if (!preg_match('/^4[0-9]{12}(?:[0-9]{3})?$/', $cardNumber)) {
        return false;
    }
    
    // Implement the Luhn algorithm to verify the card number
    $sum = 0;
    $numDigits = strlen($cardNumber);
    $parity = $numDigits % 2;
    for ($i = 0; $i < $numDigits; $i++) {
        $digit = intval($cardNumber[$i]);
        if ($i % 2 == $parity) {
            $digit *= 2;
            if ($digit > 9) {
                $digit -= 9;
            }
        }
        $sum += $digit;
    }
    return $sum % 10 == 0;
}

$cardNumber = '4111111111111111';
if (validateVisa($cardNumber)) {
    echo 'Valid Visa number';
} else {
    echo 'Invalid Visa number';
}
